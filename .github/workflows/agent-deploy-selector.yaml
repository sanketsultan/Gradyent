name: Agent Deploy Selector

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Choose which agent to deploy: datadog, velero, both'
        required: true
        default: 'none'

jobs:
  uninstall:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy == 'datadog' || github.event.inputs.deploy == 'both' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      - name: Uninstall existing Datadog Agent Helm release
        run: |
          helm uninstall datadog-agent || true
          kubectl delete clusterrole datadog-agent-cluster-agent --ignore-not-found
          kubectl delete clusterrolebinding datadog-agent-cluster-agent --ignore-not-found

  deploy-datadog:
    runs-on: ubuntu-latest
    needs: uninstall
    if: ${{ github.event.inputs.deploy == 'datadog' || github.event.inputs.deploy == 'both' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      - name: Deploy Datadog Agent with custom values
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          helm repo add datadog https://helm.datadoghq.com
          helm repo update
          kubectl create secret generic datadog-secret --from-literal api-key=$DATADOG_API_KEY -n datadog --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install datadog-agent datadog/datadog \
              --namespace datadog --create-namespace\
              -f observability/datadog-values.yaml
      - name: Check Datadog Agent pods status
        run: |
          kubectl get pods -n datadog
          kubectl wait --for=condition=Ready pod -l app=datadog-agent -n datadog --timeout=180s

  deploy-velero:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy == 'velero' || github.event.inputs.deploy == 'both' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      - name: Deploy Velero
        env:
          VELERO_IAM_ROLE_ARN: ${{ secrets.VELERO_IAM_ROLE_ARN }}
        run: |
          helm repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts
          helm repo update
          helm upgrade --install velero vmware-tanzu/velero \
            --namespace velero \
            --set configuration.provider=aws \
            --set configuration.backupStorageLocation.name=default \
            --set configuration.backupStorageLocation.bucket=gradyent-velero-backups \
            --set configuration.backupStorageLocation.config.region=${{ secrets.AWS_REGION }} \
            --set configuration.backupStorageLocation.config.s3ForcePathStyle=true \
            --set credentials.useSecret=true \
            --set initContainers[0].name=velero-plugin-for-aws \
            --set initContainers[0].image=velero/velero-plugin-for-aws:v1.12.1 \
            --set serviceAccount.server.annotations."eks.amazonaws.com/role-arn"=$VELERO_IAM_ROLE_ARN
      - name: Check Velero pods status
        run: |
          kubectl get pods -n velero
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=velero -n velero --timeout=180s
